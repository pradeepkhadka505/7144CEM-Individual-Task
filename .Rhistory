b
ggplot(marketing, aes(x=youtube, y=sales)) +
goem_point()
ggplot(marketing, aes(x=youtube, y=sales)) +
goem_point()
ggplot(marketing, aes(x=youtube, y=sales)) +
goem_point() +
goem_smooth(method=lm, se=FALSE)
ggplot(marketing, aes(x=youtube, y=sales)) +
goem_point() +
goem_smooth(method=lm, se=FALSE)
ggplot(marketing, aes(x=youtube, y=sales)) +
geom_point() +
geom_smooth(method=lm, se=FALSE)
model = lm(sales~youtube, data=marketing)
summary(model)
library(broom)
tidy(model)
fitted = argument(model)
fitted = augment(model)
fitted()
fitted = augment(model)
fitted
ggplot(fitted, aes(x=youtube, y=sales)) +
geom_point() +
geom_smooth(method=lm, se=FALSE) +
geom_segment(aes(xend=youtube, yend=.fitted), color='red', size=0.3)
library(tidyverse)
library(datarium)
marketing = as_tibble(marketing)
marketing
observed_sales = marketing$sales
observed_sales
model = lm(sales~youtube, data=marketing)
summary(model)
a
b
predicted_sales = a + b*marketing$youtube
predicted_sales
residuals_sales=observed_sales - predicted_sales
residuals_sales
ggplot(Null, aes(x=predicted_sales, y=residual_sales)) +
geom_point()
library(tidyverse)
library(datarium)
marketing = as_tibble(marketing)
marketing
observed_sales = marketing$sales
observed_sales
model = lm(sales~youtube, data=marketing)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
predicted_sales = a + b*marketing$youtube
predicted_sales
residuals_sales=observed_sales - predicted_sales
residuals_sales
ggplot(Null, aes(x=predicted_sales, y=residual_sales)) +
geom_point()
residual_sales=observed_sales - predicted_sales
residual_sales
ggplot(Null,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
ggplot(NULL,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
#next way how to get the same
model = lmm(sales~youtbe, data=marketing)
model = lm(sales~youtbe, data=marketing)
model = lm(sales~youtube, data=marketing)
library(broom)
augment(model) %>%
ggplot(aes(x=.fitted, y=.resid)) +
geom_point()
ggplot(NULL,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
install.packages("ggfortify")
library(ggfortify)
model = lm(sales~youtube, data=marketing)
autoplot(model)
#diagnostic plot
library(ggfortify)
model = lm(sales~youtube + facebook, data=marketing)
autoplot(model)
modelA = lm(sales~youtube, data=marketing)
summary(modelA)
modelB = lm(sales~youtube + facebook, data=marketing)
summary(modelB)
library(tidyverse)
library(ISLR)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit =, Income)
Summary(credit)
library(tidyverse)
library(ISLR)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit, Income)
Summary(credit)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit, Income)
summary(credit)
library(GGally)
ggscatmat(Select(credit, Balance, Limit, Income))
ggscatmat(select(credit, Balance, Limit, Income))
library(GGally)
ggscatmat(select(credit, Balance, Income, Limit))
ggscatmat(select(credit, Balance, Limit, Income))
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ="green" )
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ="green" )
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ='green' )
ggplot(credit, aes(x=Limit, y=Balance)) +
geom_point() +
geom_smooth(method="lm", se=FALSE)
model =lm(Balance~Limit, data=credit)
summary(model)
summary(model)
model$coefficients
model = lm(Balance~Limit+Income, data=Credit)
summary(model)
library(ggfortify)
autoplot(model)
credit = as_tibble(Credit)
credit =select(credit,Balance, Limit, Income, Rating, Age)
credit
model_1= lm(Balance~Rating , data=Credit)
summary(model_1)
model_2= lm(Balance~Age , data=Credit)
summary(model_2)
#Balance~Rating + Age
model_3= lm(Balance~Rating + Age , data=Credit)
summary(model_3)
#Balance~Rating
model_1= lm(Balance~Rating , data=Credit)
summary(model_1)
#Balance~Age
model_2= lm(Balance~Age , data=Credit)
summary(model_2)
#Balance~Rating + Age
model_3= lm(Balance~Rating + Age , data=Credit)
summary(model_3)
install.packages("gapminder")
Library(gapminder)
library(gapminder)
gapminder2007 = gapminder %>%
filter(year==2007) %>%
select(country, continent, lifeExp, gdpPercap)
gapminder2007
summary(gapminder2007$lifeExp)
ggplot(gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5)
model = lm(lifeExp~1, data=gapminder2007)
model
gapminder2007 %>%
group_by(continent) %>%
summarise(count=n(),mean=mean(lifeExp))
ggplot(gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5) +
facet_wrap(~continent)
gapminder2007 %>%
group_by(continent) %>%
summarise(count=n(),mean=mean(lifeExp-54.8))
model = lm(lifeExp~continent, data=gapminder2007)
model
pradeep
"pradeep
khadka"
q()
(tidyverse)
library(tidyverse)
library(tidyverse)
data = read_csv('/data/index_of_economic_freedom_2024.csv')
data = read_csv('data/index_of_economic_freedom_2024.csv')
data = read_csv('./data/index_of_economic_freedom_2024.csv')
data = read_csv("./data/index_of_economic_freedom_2024.csv")
data = read_csv("data\index_of_economic_freedom_2024.csv")
data = read_csv("data/index_of_economic_freedom_2024.csv")
data = read_csv('data/index_of_economic_freedom_2024.csv')
data = read_csv('index_of_economic_freedom_2024.csv')
data = read_csv('data/index_of_economic_freedom_2024.csv')
a = read_csv('data/index_of_economic_freedom_2024.csv')
a = read_csv('data/index_of_economic_freedom_2024.csv')
a = read_csv('~/data/index_of_economic_freedom_2024.csv')
library(tidyverse)
a = read_csv('~/data/index_of_economic_freedom_2024.csv')
a = read_csv("data/index_of_economic_freedom_2024.csv")
a = read_csv("data/index_of_economic_freedom_2024.csv")
a = read_csv("data/index_of_economic_freedom_2024.csv")
a = read_csv("data/index_of_economic_freedom_2024.csv")
a = read_csv("data/index_of_economic_freedom_2024.csv")
a = read_csv("data/index_of_economic_freedom_2024.csv")
setwd("C:/Users/acer/Desktop/Coventry-Uni/7144CEM-Individual-Task")
a = read_csv("data/index_of_economic_freedom_2024.csv")
print(a)
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
print(economic_data)
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
colname(economic_data)
colsname(economic_data)
cols(economic_data)
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
colnames(economic_data)
summary(economic_data)
nrow(economic_data)
economic_data_na = na.omit(economic_data)
economic_data_na
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
summary(economic_data)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
summary(economic_data_na)
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
summary(economic_data)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
summary(economic_data_na)
#step 4: Checking all NA values in data-set after removing rows having na values
summary(economic_data_na)
nrow(economic_data_na)
economic_data_na %>%
select(Overall_Score) %>%
head()
economic_data_na <- economic_data_na
arange(desc(Overall_score))
economic_data_na <- economic_data_na
arrange(desc(Overall_score))
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_score))
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
summary(economic_data_na)
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
#Notice s
#    * portfolio assessment (join a group)
#    * practical Test
#1. visualization of Multivariate Data
library(tidyverse)
sparrows = read_tsv('sparrows.tsv')
setwd("C:/Users/acer/Desktop/Coventry-Uni/7144CEM-Principle-of-Data-Science/Week-9")
#Notice s
#    * portfolio assessment (join a group)
#    * practical Test
#1. visualization of Multivariate Data
library(tidyverse)
sparrows = read_tsv('sparrows.tsv')
sparrows
colnames(sparrows)
summary(sparrows)  #it gives quantitative variable mean max quartile data
library(GGally)
ggpairs(sparrows)
stars(sparrows)
filter(sparrows, survive==0) %>%
stars()
filter(sparrows, survive==1) %>%
stars()
library(aplpack)
faces(sparrows)
library(GGally)
ggparcoord(sparrows)
#Principal Component Analysis  (PCA)
oranges = read_csv('oranges.csv')
oranges
colnames(oranges)  #17 variables
#17 variables (including product)
#6 rows
library(GGally)
select(oranges, -product) %>%
ggpairs()
setwd("C:/Users/acer/Desktop/Coventry-Uni/7144CEM-Individual-Task")
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
economic_data_na = na.omit(economic_data)
economic_data_na
summary(economic_data_na)
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#view all to columns
colnames(economic_data)
#Step 1: checking all NA values in datasets using Summary() method
summary(economic_data)
#Step 2: Number of rows
nrow(economic_data)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
#Step 4: Checking all NA values in data-set after removing rows having na values
summary(economic_data_na)
#number of rows after removing
nrow(economic_data_na)
library(ggplot2)
library(ggplot2)
library(GGally)
ggpairs(economic_data_na)
ggpairs(economic_data_na)
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na)
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#view all to columns
colnames(economic_data)
#Step 1: checking all NA values in data sets using Summary() method
summary(economic_data)
#Step 2: Number of rows
nrow(economic_data)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
#Step 4: Checking all NA values in data-set after removing rows having NA values
summary(economic_data_na)
#number of rows after removing
nrow(economic_data_na)
#step 4 : Sorting data sets using overall_score highest to lowest
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
#-Section 2 :
#--------> Part-1: R to build the Scatter matrix plot using ggpairs()
#Step-1: Installing ggPlot() and GGally() package for ploting scatter matrix plot
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na)
describe(economic_data_na)
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
economic_data_na = na.omit(economic_data)
economic_data_na
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
describe(economic_data_na)
library(GGally)
ggpairs(economic_data_na)
library(ILSR)
library(ggplot2)
library(GGally)
plot(economic_data_na)
ggplot(economic_data_na)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggplot(economic_data_na)
ggplot(economic_data_na)
ggpairs(economic_data_na)
ggpairs(economic_data_na)
ggpairs(economic_data_na)
ggpairs(economic_data_na,
columns = 4:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv", stringsAsFactors= FALSE)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
nrow(economic_data_na)
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
columns = 4:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
columns = 4:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
columns = 7:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
economic_data = read_csv("data/index_of_economic_freedom_2024.csv", stringsAsFactors= FALSE)
setwd("C:/Users/acer/Desktop/Coventry-Uni/7144CEM-Individual-Task")
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
#columns = 7:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv", stringsAsFactors= FALSE)
tidyverse is library for EDA
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#view all to columns
colnames(economic_data)
glimpse(economic_data)
#Step 1: checking all NA values in data sets using Summary() method
summary(economic_data)
#Step 2: Number of rows
nrow(economic_data)
#step 3: removing NA values from each row
economic_data_na = na.omit(economic_data)
economic_data_na
#Step 4: Checking all NA values in data-set after removing rows having NA values
summary(economic_data_na)
#number of rows after removing
nrow(economic_data_na)
#step 4 : Sorting data sets using overall_score highest to lowest
economic_data_na <- economic_data_na %>%
arrange(desc(Overall_Score))
economic_data_na
#-Section 2 :
#--------> Part-1: R to build the Scatter matrix plot using ggpairs()
#Step-1: Installing ggPlot() and GGally() package for ploting scatter matrix plot
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
#columns = 7:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region"
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
#columns = 7:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region",
cardinality_threshold = 200
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
columns = 4:16, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region",
cardinality_threshold = 200
)
economic_data_na = na.omit(economic_data)
economic_data_na
economic_data_na = arrange(economic_data_na,desc(Overall_score))
economic_data_na = arrange(economic_data_na,desc(Overall_Score))
economic_data_na
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_data_na,
columns = 4:12, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region",
cardinality_threshold = 200
)
ggpairs(economic_data_na,
columns = 4:12, # Adjust column indices to include numeric variables
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region",
cardinality_threshold = 200
)
