observed_sales = marketing$sales
observed_sales
model = lm(sales~youtube, data=marketing)
summary(model)
a
b
predicted_sales = a + b*marketing$youtube
predicted_sales
residuals_sales=observed_sales - predicted_sales
residuals_sales
ggplot(Null, aes(x=predicted_sales, y=residual_sales)) +
geom_point()
library(tidyverse)
library(datarium)
marketing = as_tibble(marketing)
marketing
observed_sales = marketing$sales
observed_sales
model = lm(sales~youtube, data=marketing)
summary(model)
a = model$coefficients[1]
b = model$coefficients[2]
a
b
predicted_sales = a + b*marketing$youtube
predicted_sales
residuals_sales=observed_sales - predicted_sales
residuals_sales
ggplot(Null, aes(x=predicted_sales, y=residual_sales)) +
geom_point()
residual_sales=observed_sales - predicted_sales
residual_sales
ggplot(Null,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
ggplot(NULL,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
#next way how to get the same
model = lmm(sales~youtbe, data=marketing)
model = lm(sales~youtbe, data=marketing)
model = lm(sales~youtube, data=marketing)
library(broom)
augment(model) %>%
ggplot(aes(x=.fitted, y=.resid)) +
geom_point()
ggplot(NULL,aes(x=predicted_sales, y=residual_sales)) +
geom_point()
install.packages("ggfortify")
library(ggfortify)
model = lm(sales~youtube, data=marketing)
autoplot(model)
#diagnostic plot
library(ggfortify)
model = lm(sales~youtube + facebook, data=marketing)
autoplot(model)
modelA = lm(sales~youtube, data=marketing)
summary(modelA)
modelB = lm(sales~youtube + facebook, data=marketing)
summary(modelB)
library(tidyverse)
library(ISLR)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit =, Income)
Summary(credit)
library(tidyverse)
library(ISLR)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit, Income)
Summary(credit)
credit = as_tibble(Credit)
credit = select(credit, Balance, Limit, Income)
summary(credit)
library(GGally)
ggscatmat(Select(credit, Balance, Limit, Income))
ggscatmat(select(credit, Balance, Limit, Income))
library(GGally)
ggscatmat(select(credit, Balance, Income, Limit))
ggscatmat(select(credit, Balance, Limit, Income))
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ="green" )
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ="green" )
library(GGally)
ggscatmat(select(credit, Balance, Limit, Income), color ='green' )
ggplot(credit, aes(x=Limit, y=Balance)) +
geom_point() +
geom_smooth(method="lm", se=FALSE)
model =lm(Balance~Limit, data=credit)
summary(model)
summary(model)
model$coefficients
model = lm(Balance~Limit+Income, data=Credit)
summary(model)
library(ggfortify)
autoplot(model)
credit = as_tibble(Credit)
credit =select(credit,Balance, Limit, Income, Rating, Age)
credit
model_1= lm(Balance~Rating , data=Credit)
summary(model_1)
model_2= lm(Balance~Age , data=Credit)
summary(model_2)
#Balance~Rating + Age
model_3= lm(Balance~Rating + Age , data=Credit)
summary(model_3)
#Balance~Rating
model_1= lm(Balance~Rating , data=Credit)
summary(model_1)
#Balance~Age
model_2= lm(Balance~Age , data=Credit)
summary(model_2)
#Balance~Rating + Age
model_3= lm(Balance~Rating + Age , data=Credit)
summary(model_3)
install.packages("gapminder")
Library(gapminder)
library(gapminder)
gapminder2007 = gapminder %>%
filter(year==2007) %>%
select(country, continent, lifeExp, gdpPercap)
gapminder2007
summary(gapminder2007$lifeExp)
ggplot(gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5)
model = lm(lifeExp~1, data=gapminder2007)
model
gapminder2007 %>%
group_by(continent) %>%
summarise(count=n(),mean=mean(lifeExp))
ggplot(gapminder2007, aes(x=lifeExp)) +
geom_histogram(binwidth=5) +
facet_wrap(~continent)
gapminder2007 %>%
group_by(continent) %>%
summarise(count=n(),mean=mean(lifeExp-54.8))
model = lm(lifeExp~continent, data=gapminder2007)
model
pradeep
"pradeep
khadka"
q()
(tidyverse)
library(tidyverse)
library(tidyverse)
data = read_csv('/data/index_of_economic_freedom_2024.csv')
data = read_csv('data/index_of_economic_freedom_2024.csv')
data = read_csv('./data/index_of_economic_freedom_2024.csv')
data = read_csv("./data/index_of_economic_freedom_2024.csv")
data = read_csv("data\index_of_economic_freedom_2024.csv")
data = read_csv("data/index_of_economic_freedom_2024.csv")
data = read_csv('data/index_of_economic_freedom_2024.csv')
data = read_csv('index_of_economic_freedom_2024.csv')
data = read_csv('data/index_of_economic_freedom_2024.csv')
a = read_csv('data/index_of_economic_freedom_2024.csv')
a = read_csv('data/index_of_economic_freedom_2024.csv')
install.packages(c("curl", "fontawesome", "fs", "knitr", "ps", "quantreg", "Rcpp", "rmarkdown", "tinytex", "xfun"))
close
ls
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
setwd("C:/Users/acer/Desktop/Coventry-Uni/7144CEM-Individual-Task")
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#view all to columns
colnames(economic_data)
glimpse(economic_data)
#Step 1: checking all NA values in data sets using Summary() method
summary(economic_data)
#Step 2: Number of rows
nrow(economic_data)
#step 3: removing NA values from each row
economic_clean_data = na.omit(economic_data)
economic_cleand_data
#step 3: removing NA values from each row
economic_cleaned_data = na.omit(economic_data)
economic_cleaned_data
#step 3: removing NA values from each row
economic_cleaned_data = na.omit(economic_data)
economic_cleaned_data
#Step 4: Checking all NA values in data-set after removing rows having NA values
summary(economic_cleaned_data)
#number of rows after removing
nrow(economic_cleaned_data)
#step 4 : Sorting data sets using overall_score highest to lowest
economic_cleaned_data = arrange(economic_cleaned_data,desc(Overall_Score))
economic_cleaned_data
economic_pillar_data <- economic_cleaned_data %>%
select(Overall_Score:Financial_Freedom)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
select(Overall_Score:Financial_Freedom)
economic_pillar_data
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data
aes(color = Region),
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color = Region),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color='Overall_Score'),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
select(Region:Financial_Freedom)
economic_pillar_data
#Step-1: Installing ggPlot() and GGally() package for ploting scatter matrix plot
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color='Overall_Score'),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step-1: Installing ggPlot() and GGally() package for ploting scatter matrix plot
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color='Overall_Score'),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color='Region'),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
select(c(4:16))
economic_pillar_data
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(color='Region'),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step - 3 : Single-predictor Linear Model
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
select(Property_Rights: Financial_Freedom)
economic_pillar_data
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea'))
select(Property_Rights: Financial_Freedom)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea'))
select(Property_Right: Financial_Freedom)
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea'))
select(Property_Rights: Financial_Freedom)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea')) %>%
select(Property_Rights : Financial_Freedom)
economic_pillar_data
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea')) %>%
select(Property_Rights : Financial_Freedom)
economic_pillar_data
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(Country %in% c('Cuba', 'North Korea')) %>%
select(Property_Rights : Financial_Freedom)
glimpse(economic_pillar_data)
nrows(economic_pillar_data)
nrow(economic_pillar_data)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(!Country %in% c('Cuba', 'North Korea')) %>%
select(Property_Rights : Financial_Freedom)
glimpse(economic_pillar_data)
nrow(economic_pillar_data)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(!Country %in% c('Cuba', 'North Korea')) %>%
select(Overall_Scrore : Financial_Freedom)
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(!Country %in% c('Cuba', 'North Korea')) %>%
select(Overall_Score : Financial_Freedom)
glimpse(economic_pillar_data)
nrow(economic_pillar_data)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
model = lm(Overall_Score~Property_Rights, data = economic_pillar_data)
model
summary(model)
autoplot(model)
library(ggfortify)
autoplot(model)
model = lm(Overall_Score~Goverment_Integrity, data = economic_pillar_data)
model = lm(Overall_Score~Government_Integrity , data = economic_pillar_data)
model
summary(model)
library(ggfortify)
autoplot(model)
install.packages("olsrr")
library(Olsr)
library(olsrr)
model = lm(Overall_Score~Property_Rights , data = economic_pillar_data)
model
summary(model)
#Step - 3 : Single-predictor Linear Model
model = lm(Overall_Score~Property_Rights , data = economic_pillar_data)
model
summary(model)
#Step - 3 : Single-predictor Linear Model
model = lm(Overall_Score~Property_Rights , data = economic_pillar_data)
model
summary(model)
library(ggfortify)
autoplot(model)
# Compute correlation matrix for the pillar variables
correlation_matrix <- cor(economic_cleaned_data[, economic_pillar_data], use = "complete.obs")
# Compute correlation matrix for the pillar variables
correlation_matrix <- cor(economic_pillar_data[, economic_pillar_data], use = "complete.obs")
# Compute correlation matrix for the pillar variables
correlation_matrix <- cor(economic_pillar_data, use = "complete.obs")
# Print the correlation matrix
print(correlation_matrix)
library(corrplot)
# Create a correlogram
corrplot(correlation_matrix, method = "color", type = "upper", tl.cex = 0.8, addCoef.col = "black")
library(ggplot2)
library(reshape2)
# Melt correlation matrix for visualization
correlation_melt <- melt(correlation_matrix)
# Plot heatmap
ggplot(correlation_melt, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "")
library(ggplot2)
library(reshape2)
# Melt correlation matrix for visualization
correlation_melt <- melt(correlation_matrix)
# Plot heatmap
ggplot(correlation_melt, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "")
library(ggplot2)
library(reshape2)
# Melt correlation matrix for visualization
correlation_melt <- melt(correlation_matrix)
# Plot heatmap
ggplot(correlation_melt, aes(Var1, Var2, fill = value)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0) +
theme_minimal() +
labs(title = "Correlation Heatmap", x = "", y = "")
library(corrplot)
# Create a correlogram
corrplot(correlation_matrix, method = "color", type = "upper", tl.cex = 0.8, addCoef.col = "black")
#Step - 3 : Single-predictor Linear Model
model = lm(Overall_Score~Property_Rights , data = economic_pillar_data)
model
summary(model)
library(ggfortify)
autoplot(model)
library(olsrr)
library(corrplot)
# Create a correlogram
corrplot(correlation_matrix, method = "color", type = "upper", tl.cex = 0.8, addCoef.col = "black")
library(olsrr)
#any two predictor variable
model1 <- lm(Overall_Score ~ Property_Rights + Tax_Burden, data = economic_pillar_data)
summary(model1)
#any four predictor variable
model2 <- lm(Overall_Score ~ Property_Rights + Tax_Burden + Trade_Freedom + Fiscal_Health, data = economic_pillar_data)
summary(model2)
AIC(model1, model2)
#library(olsrr)
AIC(model1, model2)
AIC(model1, model2)
#tidyverse is library for EDA
library(tidyverse)
#-Section-1 :
#---------> 1. loading Data sets
#---------> 2. Checking all NA values of Data sets using Summary method
#---------> 3. checking number of rows having NA values
#---------> 4. Removing NA values from Data sets
#---------> 5. Checking Data sets Summary method
#---------> 6. checking number of rows after removing NA values
#========================================================================
#loading data from data sets
economic_data = read_csv("data/index_of_economic_freedom_2024.csv")
economic_data
#view all to columns
colnames(economic_data)
glimpse(economic_data)
#Step 1: checking all NA values in data sets using Summary() method
summary(economic_data)
#Step 2: Number of rows
nrow(economic_data)
#step 3: removing NA values from each row
economic_cleaned_data = na.omit(economic_data)
economic_cleaned_data
#Step 4: Checking all NA values in data-set after removing rows having NA values
summary(economic_cleaned_data)
#number of rows after removing
nrow(economic_cleaned_data)
#step 4 : Sorting data sets using overall_score highest to lowest
economic_cleaned_data = arrange(economic_cleaned_data,desc(Overall_Score))
economic_cleaned_data
#Step 5 : geting all 12 pillar data from cleaned data
economic_pillar_data <- economic_cleaned_data %>%
filter(!Country %in% c('Cuba', 'North Korea')) %>%
select(Overall_Score : Financial_Freedom)
glimpse(economic_pillar_data)
nrow(economic_pillar_data)
#-Section 2 :
#--------> Part-1: R to build the Scatter matrix plot using ggpairs()
#Step-1: Installing ggPlot() and GGally() package for ploting scatter matrix plot
library(ggplot2)
library(GGally)
#Step-2: Using ggpairs() of above library in data sets after removing NA values & sorting
ggpairs(economic_pillar_data,
aes(),
title = "Scatter Matrix of Economic Freedom Variables by Region",
)
# Compute correlation matrix for the pillar variables
correlation_matrix <- cor(economic_pillar_data, use = "complete.obs")
# Print the correlation matrix
print(correlation_matrix)
library(corrplot)
# Create a correlogram
corrplot(correlation_matrix, method = "color", type = "upper", tl.cex = 0.8, addCoef.col = "black")
#Step - 3 : Single-predictor Linear Model
model = lm(Overall_Score~Property_Rights , data = economic_pillar_data)
model
summary(model)
#step -4 : To check Residual and fitted value and Normal Q-Q
library(ggfortify)
autoplot(model)
#------ Section-3
#---------------> Part-A:
#==========================================
#library(olsrr)
#any two predictor variable
model1 <- lm(Overall_Score ~ Property_Rights + Tax_Burden, data = economic_pillar_data)
summary(model1)
#any four predictor variable
model2 <- lm(Overall_Score ~ Property_Rights + Tax_Burden + Trade_Freedom + Fiscal_Health, data = economic_pillar_data)
summary(model2)
AIC(model1, model2)
model_1 = lm(Overall_Score ~ Goverment_Spending + Labor_Freedom, data = economic_pillar_data)
#Step-1 = linear model using only government spending and labor freedom as predictors.
model_1 = lm(Overall_Score ~ Goverment_Spending + Labor_Freedom, data = economic_pillar_data)
#Step-1 = linear model using only government spending and labor freedom as predictors.
model_1 = lm(Overall_Score ~ Government_Spending + Labor_Freedom, data = economic_pillar_data)
model_1
#Step-1 = linear model using only government spending and labor freedom as predictors.
model_1 = lm(Overall_Score ~ Government_Spending + Labor_Freedom, data = economic_pillar_data)
model_1
summary(model_1)
model_2 <- lm(Overall_Score ~ Property_Rights + Tax_Burden, data = economic_pillar_data)
summary(model_2)
model_3 <- lm(Overall_Score ~ Property_Rights + Tax_Burden + Trade_Freedom + Fiscal_Health, data = economic_pillar_data)
summary(model_3)
model_3 <- lm(Overall_Score ~ Property_Rights +
Tax_Burden +
Trade_Freedom +
Fiscal_Health,
data = economic_pillar_data)
summary(model_3)
AIC(model_1, model_2, model_3)
